//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AirpocketTRN.FatehService {
    using System.Data;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="FatehService.ServiceSoap")]
    public interface ServiceSoap {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ApikeySendsmsphonebook", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string ApikeySendsmsphonebook(string cApikey, string cBody, string cGetid, int nTypeSent, string m_SchedulDate, string cFromNumber, int nSpeedsms, int nPeriodmin, string cstarttime, string cEndTime, int groupphonebook, bool isgroupid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ApikeySendsmsphonebook", ReplyAction="*")]
        System.Threading.Tasks.Task<string> ApikeySendsmsphonebookAsync(string cApikey, string cBody, string cGetid, int nTypeSent, string m_SchedulDate, string cFromNumber, int nSpeedsms, int nPeriodmin, string cstarttime, string cEndTime, int groupphonebook, bool isgroupid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ApikeySENDVERIFICATIONCODE", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string ApikeySENDVERIFICATIONCODE(string cApikey, string cMobileno, int nVerificationid, int nCodeVerification);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ApikeySENDVERIFICATIONCODE", ReplyAction="*")]
        System.Threading.Tasks.Task<string> ApikeySENDVERIFICATIONCODEAsync(string cApikey, string cMobileno, int nVerificationid, int nCodeVerification);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Apikeyaddinphonebook", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string Apikeyaddinphonebook(string cApikey, string phonebookcode, string cMobileno, string Companyname, string Fullname, string sexid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Apikeyaddinphonebook", ReplyAction="*")]
        System.Threading.Tasks.Task<string> ApikeyaddinphonebookAsync(string cApikey, string phonebookcode, string cMobileno, string Companyname, string Fullname, string sexid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ApikeyGetReciveMessagein7array", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string[] ApikeyGetReciveMessagein7array(string cApikey, bool lReceiveAllmsg, string cFromnumber, string cFromDate, string cToDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ApikeyGetReciveMessagein7array", ReplyAction="*")]
        System.Threading.Tasks.Task<string[]> ApikeyGetReciveMessagein7arrayAsync(string cApikey, bool lReceiveAllmsg, string cFromnumber, string cFromDate, string cToDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ApikeyGetNumber", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string[] ApikeyGetNumber(string cApikey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ApikeyGetNumber", ReplyAction="*")]
        System.Threading.Tasks.Task<string[]> ApikeyGetNumberAsync(string cApikey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Apikeychargeuser", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string Apikeychargeuser(string cApikey, string cUsercharge, long nCharge, string cDesCharge);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Apikeychargeuser", ReplyAction="*")]
        System.Threading.Tasks.Task<string> ApikeychargeuserAsync(string cApikey, string cUsercharge, long nCharge, string cDesCharge);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ApikeyActivateCentral", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string ApikeyActivateCentral(string cApikey, string cSerial, bool lActivationType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ApikeyActivateCentral", ReplyAction="*")]
        System.Threading.Tasks.Task<string> ApikeyActivateCentralAsync(string cApikey, string cSerial, bool lActivationType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ApikeySantralConfig", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string[] ApikeySantralConfig(string cApikey, string cCommand, int typeodata, string[] cValues, string[] cDatas);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ApikeySantralConfig", ReplyAction="*")]
        System.Threading.Tasks.Task<string[]> ApikeySantralConfigAsync(string cApikey, string cCommand, int typeodata, string[] cValues, string[] cDatas);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ApikeySendSms", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string ApikeySendSms(string cApikey, string cBody, string cSmsnumber, string cGetid, int nCMessage, int nTypeSent, string m_SchedulDate, string cFromNumber, int nSpeedsms, int nPeriodmin, string cstarttime, string cEndTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ApikeySendSms", ReplyAction="*")]
        System.Threading.Tasks.Task<string> ApikeySendSmsAsync(string cApikey, string cBody, string cSmsnumber, string cGetid, int nCMessage, int nTypeSent, string m_SchedulDate, string cFromNumber, int nSpeedsms, int nPeriodmin, string cstarttime, string cEndTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ApikeySendSms1To1", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        long[] ApikeySendSms1To1(string cApikey, string[] aBody, string[] aMobileno, long[] aGetid, int[] aCMessage, string[] aFromNumber, int[] atypeUnicodemessage, string[] am_SchedulDate, int nTypeSent, int nSpeedsms, int nPeriodmin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ApikeySendSms1To1", ReplyAction="*")]
        System.Threading.Tasks.Task<long[]> ApikeySendSms1To1Async(string cApikey, string[] aBody, string[] aMobileno, long[] aGetid, int[] aCMessage, string[] aFromNumber, int[] atypeUnicodemessage, string[] am_SchedulDate, int nTypeSent, int nSpeedsms, int nPeriodmin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ApikeyGetDelivery", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string[] ApikeyGetDelivery(string cApikey, string[] aSid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ApikeyGetDelivery", ReplyAction="*")]
        System.Threading.Tasks.Task<string[]> ApikeyGetDeliveryAsync(string cApikey, string[] aSid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ApikeyGetuserInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string[] ApikeyGetuserInfo(string cApikey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ApikeyGetuserInfo", ReplyAction="*")]
        System.Threading.Tasks.Task<string[]> ApikeyGetuserInfoAsync(string cApikey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ApikeyGetDeliveryWithGetid", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string[] ApikeyGetDeliveryWithGetid(string cApikey, string cGetid, bool lReturnSid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ApikeyGetDeliveryWithGetid", ReplyAction="*")]
        System.Threading.Tasks.Task<string[]> ApikeyGetDeliveryWithGetidAsync(string cApikey, string cGetid, bool lReturnSid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ApikeyReceivesmsLowLevel", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        AirpocketTRN.FatehService.ApikeyReceivesmsLowLevelResponse ApikeyReceivesmsLowLevel(AirpocketTRN.FatehService.ApikeyReceivesmsLowLevelRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ApikeyReceivesmsLowLevel", ReplyAction="*")]
        System.Threading.Tasks.Task<AirpocketTRN.FatehService.ApikeyReceivesmsLowLevelResponse> ApikeyReceivesmsLowLevelAsync(AirpocketTRN.FatehService.ApikeyReceivesmsLowLevelRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ApikeyReceiveSms", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable ApikeyReceiveSms(string cApikey, bool lReceiveAllmsg, string cFromnumber, string cFromDate, string cToDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ApikeyReceiveSms", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> ApikeyReceiveSmsAsync(string cApikey, bool lReceiveAllmsg, string cFromnumber, string cFromDate, string cToDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ApikeyDeleteReceivedMessages", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string[] ApikeyDeleteReceivedMessages(string cApikey, long[] nMessageIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ApikeyDeleteReceivedMessages", ReplyAction="*")]
        System.Threading.Tasks.Task<string[]> ApikeyDeleteReceivedMessagesAsync(string cApikey, long[] nMessageIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ApikeyChangeReceiveNo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string ApikeyChangeReceiveNo(string cApikey, bool lReceiveAllmsg, string cFromNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ApikeyChangeReceiveNo", ReplyAction="*")]
        System.Threading.Tasks.Task<string> ApikeyChangeReceiveNoAsync(string cApikey, bool lReceiveAllmsg, string cFromNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ApikeyGetMessageDelivery1to1", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int[] ApikeyGetMessageDelivery1to1(string cApikey, long[] longid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ApikeyGetMessageDelivery1to1", ReplyAction="*")]
        System.Threading.Tasks.Task<int[]> ApikeyGetMessageDelivery1to1Async(string cApikey, long[] longid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ApikeyGetMessageDelivery1to1V2", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        long[] ApikeyGetMessageDelivery1to1V2(string cApikey, long[] longid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ApikeyGetMessageDelivery1to1V2", ReplyAction="*")]
        System.Threading.Tasks.Task<long[]> ApikeyGetMessageDelivery1to1V2Async(string cApikey, long[] longid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ApikeygetMessageIds1to1", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        long[] ApikeygetMessageIds1to1(string cApikey, long[] nCustomerid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ApikeygetMessageIds1to1", ReplyAction="*")]
        System.Threading.Tasks.Task<long[]> ApikeygetMessageIds1to1Async(string cApikey, long[] nCustomerid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GenerateApiKey", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GenerateApiKey(string cDomainName, string cUsername, string cPassword, int nlentgh);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GenerateApiKey", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GenerateApiKeyAsync(string cDomainName, string cUsername, string cPassword, int nlentgh);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Sendsmsphonebook", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string Sendsmsphonebook(string cUserName, string cPassword, string cBody, string cGetid, int nTypeSent, string m_SchedulDate, string cDomainname, string cFromNumber, int nSpeedsms, int nPeriodmin, string cstarttime, string cEndTime, int groupphonebook, bool isgroupid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Sendsmsphonebook", ReplyAction="*")]
        System.Threading.Tasks.Task<string> SendsmsphonebookAsync(string cUserName, string cPassword, string cBody, string cGetid, int nTypeSent, string m_SchedulDate, string cDomainname, string cFromNumber, int nSpeedsms, int nPeriodmin, string cstarttime, string cEndTime, int groupphonebook, bool isgroupid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SENDVERIFICATIONCODE", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string SENDVERIFICATIONCODE(string cDomainName, string cUsername, string cPassword, string cMobileno, int nVerificationid, int nCodeVerification);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SENDVERIFICATIONCODE", ReplyAction="*")]
        System.Threading.Tasks.Task<string> SENDVERIFICATIONCODEAsync(string cDomainName, string cUsername, string cPassword, string cMobileno, int nVerificationid, int nCodeVerification);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/addinphonebook", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string addinphonebook(string cDomainName, string cUsername, string cPassword, string phonebookcode, string cMobileno, string Companyname, string Fullname, string sexid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/addinphonebook", ReplyAction="*")]
        System.Threading.Tasks.Task<string> addinphonebookAsync(string cDomainName, string cUsername, string cPassword, string phonebookcode, string cMobileno, string Companyname, string Fullname, string sexid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetReciveMessagein7array", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string[] GetReciveMessagein7array(string cUserName, string cPassword, bool lReceiveAllmsg, string cDomainName, string cFromnumber, string cFromDate, string cToDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetReciveMessagein7array", ReplyAction="*")]
        System.Threading.Tasks.Task<string[]> GetReciveMessagein7arrayAsync(string cUserName, string cPassword, bool lReceiveAllmsg, string cDomainName, string cFromnumber, string cFromDate, string cToDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetNumber", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string[] GetNumber(string cDomainname, string cUsername, string cpassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetNumber", ReplyAction="*")]
        System.Threading.Tasks.Task<string[]> GetNumberAsync(string cDomainname, string cUsername, string cpassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ForgetPassword", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string ForgetPassword(string cDomainname, string cUsername, string cMobileno);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ForgetPassword", ReplyAction="*")]
        System.Threading.Tasks.Task<string> ForgetPasswordAsync(string cDomainname, string cUsername, string cMobileno);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/chargeuser", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string chargeuser(string cDomainname, string cUsername, string cpassword, string cUsercharge, long nCharge, string cDesCharge);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/chargeuser", ReplyAction="*")]
        System.Threading.Tasks.Task<string> chargeuserAsync(string cDomainname, string cUsername, string cpassword, string cUsercharge, long nCharge, string cDesCharge);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ActivateCentral", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string ActivateCentral(string cUSername, string cPassword, string cDomainname, string cSerial, bool lActivationType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ActivateCentral", ReplyAction="*")]
        System.Threading.Tasks.Task<string> ActivateCentralAsync(string cUSername, string cPassword, string cDomainname, string cSerial, bool lActivationType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SantralData", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string SantralData(string cUSername, string cPassword, string cDomainname, string cData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SantralData", ReplyAction="*")]
        System.Threading.Tasks.Task<string> SantralDataAsync(string cUSername, string cPassword, string cDomainname, string cData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SantralConfig", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string[] SantralConfig(string cUSername, string cPassword, string cDomainname, string cCommand, int typeodata, string[] cValues, string[] cDatas);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SantralConfig", ReplyAction="*")]
        System.Threading.Tasks.Task<string[]> SantralConfigAsync(string cUSername, string cPassword, string cDomainname, string cCommand, int typeodata, string[] cValues, string[] cDatas);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SendSmsShort", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string SendSmsShort(string cUserName, string cPassword, string cBody, string cSmsnumber, string cDomainname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SendSmsShort", ReplyAction="*")]
        System.Threading.Tasks.Task<string> SendSmsShortAsync(string cUserName, string cPassword, string cBody, string cSmsnumber, string cDomainname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SendSms", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string SendSms(string cUserName, string cPassword, string cBody, string cSmsnumber, string cGetid, int nCMessage, int nTypeSent, string m_SchedulDate, string cDomainname, string cFromNumber, int nSpeedsms, int nPeriodmin, string cstarttime, string cEndTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SendSms", ReplyAction="*")]
        System.Threading.Tasks.Task<string> SendSmsAsync(string cUserName, string cPassword, string cBody, string cSmsnumber, string cGetid, int nCMessage, int nTypeSent, string m_SchedulDate, string cDomainname, string cFromNumber, int nSpeedsms, int nPeriodmin, string cstarttime, string cEndTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SendSms1To1", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        long[] SendSms1To1(string cDomainname, string cUserName, string cPassword, string[] aBody, string[] aMobileno, long[] aGetid, int[] aCMessage, string[] aFromNumber, int[] atypeUnicodemessage, string[] am_SchedulDate, int nTypeSent, int nSpeedsms, int nPeriodmin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SendSms1To1", ReplyAction="*")]
        System.Threading.Tasks.Task<long[]> SendSms1To1Async(string cDomainname, string cUserName, string cPassword, string[] aBody, string[] aMobileno, long[] aGetid, int[] aCMessage, string[] aFromNumber, int[] atypeUnicodemessage, string[] am_SchedulDate, int nTypeSent, int nSpeedsms, int nPeriodmin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetDelivery", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string[] GetDelivery(string cUserName, string cPassword, string[] aSid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetDelivery", ReplyAction="*")]
        System.Threading.Tasks.Task<string[]> GetDeliveryAsync(string cUserName, string cPassword, string[] aSid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ChangePassword", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string ChangePassword(string cUserName, string cPassword, string cNewPassword, string cDomainName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ChangePassword", ReplyAction="*")]
        System.Threading.Tasks.Task<string> ChangePasswordAsync(string cUserName, string cPassword, string cNewPassword, string cDomainName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetuserInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string[] GetuserInfo(string cUserName, string cPassword, string cDomainName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetuserInfo", ReplyAction="*")]
        System.Threading.Tasks.Task<string[]> GetuserInfoAsync(string cUserName, string cPassword, string cDomainName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetDeliveryWithGetid", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string[] GetDeliveryWithGetid(string cUserName, string cPassword, string cGetid, bool lReturnSid, string cDomainname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetDeliveryWithGetid", ReplyAction="*")]
        System.Threading.Tasks.Task<string[]> GetDeliveryWithGetidAsync(string cUserName, string cPassword, string cGetid, bool lReturnSid, string cDomainname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ReceivesmsLowLevel", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        AirpocketTRN.FatehService.ReceivesmsLowLevelResponse ReceivesmsLowLevel(AirpocketTRN.FatehService.ReceivesmsLowLevelRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ReceivesmsLowLevel", ReplyAction="*")]
        System.Threading.Tasks.Task<AirpocketTRN.FatehService.ReceivesmsLowLevelResponse> ReceivesmsLowLevelAsync(AirpocketTRN.FatehService.ReceivesmsLowLevelRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ReceiveSms", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable ReceiveSms(string cUserName, string cPassword, bool lReceiveAllmsg, string cDomainName, string cFromnumber, string cFromDate, string cToDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ReceiveSms", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> ReceiveSmsAsync(string cUserName, string cPassword, bool lReceiveAllmsg, string cDomainName, string cFromnumber, string cFromDate, string cToDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DeleteReceivedMessages", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string[] DeleteReceivedMessages(string cUserName, string cPassword, string cDomainName, long[] nMessageIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DeleteReceivedMessages", ReplyAction="*")]
        System.Threading.Tasks.Task<string[]> DeleteReceivedMessagesAsync(string cUserName, string cPassword, string cDomainName, long[] nMessageIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ChangeReceiveNo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string ChangeReceiveNo(string cUserName, string cPassword, bool lReceiveAllmsg, string cDomainName, string cFromNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ChangeReceiveNo", ReplyAction="*")]
        System.Threading.Tasks.Task<string> ChangeReceiveNoAsync(string cUserName, string cPassword, bool lReceiveAllmsg, string cDomainName, string cFromNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetMessageDelivery1to1", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int[] GetMessageDelivery1to1(string cUserName, string cPassword, string cDomainname, long[] longid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetMessageDelivery1to1", ReplyAction="*")]
        System.Threading.Tasks.Task<int[]> GetMessageDelivery1to1Async(string cUserName, string cPassword, string cDomainname, long[] longid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetMessageDelivery1to1V2", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        long[] GetMessageDelivery1to1V2(string cUserName, string cPassword, string cDomainname, long[] longid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetMessageDelivery1to1V2", ReplyAction="*")]
        System.Threading.Tasks.Task<long[]> GetMessageDelivery1to1V2Async(string cUserName, string cPassword, string cDomainname, long[] longid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/getMessageIds1to1", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        long[] getMessageIds1to1(string cUserName, string cPassword, string cDomainname, long[] nCustomerid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/getMessageIds1to1", ReplyAction="*")]
        System.Threading.Tasks.Task<long[]> getMessageIds1to1Async(string cUserName, string cPassword, string cDomainname, long[] nCustomerid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ShowError", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string ShowError(string cErrorCode, string cLanShow);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ShowError", ReplyAction="*")]
        System.Threading.Tasks.Task<string> ShowErrorAsync(string cErrorCode, string cLanShow);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetMessageLength", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int GetMessageLength(string cBody);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetMessageLength", ReplyAction="*")]
        System.Threading.Tasks.Task<int> GetMessageLengthAsync(string cBody);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetUnicodeMessage", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int GetUnicodeMessage(string cBody);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetUnicodeMessage", ReplyAction="*")]
        System.Threading.Tasks.Task<int> GetUnicodeMessageAsync(string cBody);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/mehrafrazDelivery", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        long[] mehrafrazDelivery(string cCommand, string cFormatSms, long[] asid, int[] nsmsstatus, string[] adate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/mehrafrazDelivery", ReplyAction="*")]
        System.Threading.Tasks.Task<long[]> mehrafrazDeliveryAsync(string cCommand, string cFormatSms, long[] asid, int[] nsmsstatus, string[] adate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CheckDeliverFromServer", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string CheckDeliverFromServer(int nAccountUsesid, int ntypeSms);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CheckDeliverFromServer", ReplyAction="*")]
        System.Threading.Tasks.Task<string> CheckDeliverFromServerAsync(int nAccountUsesid, int ntypeSms);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ApikeyReceivesmsLowLevel", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class ApikeyReceivesmsLowLevelRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string cApikey;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public bool lReceiveAllmsg;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public string cFromnumber;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public string[] aBody;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=4)]
        public string[] aMobileno;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=5)]
        public long[] aMessageid;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=6)]
        public string[] aReceivedate;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=7)]
        public string[] afromnumber;
        
        public ApikeyReceivesmsLowLevelRequest() {
        }
        
        public ApikeyReceivesmsLowLevelRequest(string cApikey, bool lReceiveAllmsg, string cFromnumber, string[] aBody, string[] aMobileno, long[] aMessageid, string[] aReceivedate, string[] afromnumber) {
            this.cApikey = cApikey;
            this.lReceiveAllmsg = lReceiveAllmsg;
            this.cFromnumber = cFromnumber;
            this.aBody = aBody;
            this.aMobileno = aMobileno;
            this.aMessageid = aMessageid;
            this.aReceivedate = aReceivedate;
            this.afromnumber = afromnumber;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ApikeyReceivesmsLowLevelResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class ApikeyReceivesmsLowLevelResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string[] aBody;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string[] aMobileno;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public long[] aMessageid;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public string[] aReceivedate;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=4)]
        public string[] afromnumber;
        
        public ApikeyReceivesmsLowLevelResponse() {
        }
        
        public ApikeyReceivesmsLowLevelResponse(string[] aBody, string[] aMobileno, long[] aMessageid, string[] aReceivedate, string[] afromnumber) {
            this.aBody = aBody;
            this.aMobileno = aMobileno;
            this.aMessageid = aMessageid;
            this.aReceivedate = aReceivedate;
            this.afromnumber = afromnumber;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ReceivesmsLowLevel", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class ReceivesmsLowLevelRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string cUserName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string cPassword;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public bool lReceiveAllmsg;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public string cDomainName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=4)]
        public string cFromnumber;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=5)]
        public string[] aBody;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=6)]
        public string[] aMobileno;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=7)]
        public long[] aMessageid;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=8)]
        public string[] aReceivedate;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=9)]
        public string[] afromnumber;
        
        public ReceivesmsLowLevelRequest() {
        }
        
        public ReceivesmsLowLevelRequest(string cUserName, string cPassword, bool lReceiveAllmsg, string cDomainName, string cFromnumber, string[] aBody, string[] aMobileno, long[] aMessageid, string[] aReceivedate, string[] afromnumber) {
            this.cUserName = cUserName;
            this.cPassword = cPassword;
            this.lReceiveAllmsg = lReceiveAllmsg;
            this.cDomainName = cDomainName;
            this.cFromnumber = cFromnumber;
            this.aBody = aBody;
            this.aMobileno = aMobileno;
            this.aMessageid = aMessageid;
            this.aReceivedate = aReceivedate;
            this.afromnumber = afromnumber;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ReceivesmsLowLevelResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class ReceivesmsLowLevelResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string[] aBody;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string[] aMobileno;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public long[] aMessageid;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public string[] aReceivedate;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=4)]
        public string[] afromnumber;
        
        public ReceivesmsLowLevelResponse() {
        }
        
        public ReceivesmsLowLevelResponse(string[] aBody, string[] aMobileno, long[] aMessageid, string[] aReceivedate, string[] afromnumber) {
            this.aBody = aBody;
            this.aMobileno = aMobileno;
            this.aMessageid = aMessageid;
            this.aReceivedate = aReceivedate;
            this.afromnumber = afromnumber;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ServiceSoapChannel : AirpocketTRN.FatehService.ServiceSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceSoapClient : System.ServiceModel.ClientBase<AirpocketTRN.FatehService.ServiceSoap>, AirpocketTRN.FatehService.ServiceSoap {
        
        public ServiceSoapClient() {
        }
        
        public ServiceSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string ApikeySendsmsphonebook(string cApikey, string cBody, string cGetid, int nTypeSent, string m_SchedulDate, string cFromNumber, int nSpeedsms, int nPeriodmin, string cstarttime, string cEndTime, int groupphonebook, bool isgroupid) {
            return base.Channel.ApikeySendsmsphonebook(cApikey, cBody, cGetid, nTypeSent, m_SchedulDate, cFromNumber, nSpeedsms, nPeriodmin, cstarttime, cEndTime, groupphonebook, isgroupid);
        }
        
        public System.Threading.Tasks.Task<string> ApikeySendsmsphonebookAsync(string cApikey, string cBody, string cGetid, int nTypeSent, string m_SchedulDate, string cFromNumber, int nSpeedsms, int nPeriodmin, string cstarttime, string cEndTime, int groupphonebook, bool isgroupid) {
            return base.Channel.ApikeySendsmsphonebookAsync(cApikey, cBody, cGetid, nTypeSent, m_SchedulDate, cFromNumber, nSpeedsms, nPeriodmin, cstarttime, cEndTime, groupphonebook, isgroupid);
        }
        
        public string ApikeySENDVERIFICATIONCODE(string cApikey, string cMobileno, int nVerificationid, int nCodeVerification) {
            return base.Channel.ApikeySENDVERIFICATIONCODE(cApikey, cMobileno, nVerificationid, nCodeVerification);
        }
        
        public System.Threading.Tasks.Task<string> ApikeySENDVERIFICATIONCODEAsync(string cApikey, string cMobileno, int nVerificationid, int nCodeVerification) {
            return base.Channel.ApikeySENDVERIFICATIONCODEAsync(cApikey, cMobileno, nVerificationid, nCodeVerification);
        }
        
        public string Apikeyaddinphonebook(string cApikey, string phonebookcode, string cMobileno, string Companyname, string Fullname, string sexid) {
            return base.Channel.Apikeyaddinphonebook(cApikey, phonebookcode, cMobileno, Companyname, Fullname, sexid);
        }
        
        public System.Threading.Tasks.Task<string> ApikeyaddinphonebookAsync(string cApikey, string phonebookcode, string cMobileno, string Companyname, string Fullname, string sexid) {
            return base.Channel.ApikeyaddinphonebookAsync(cApikey, phonebookcode, cMobileno, Companyname, Fullname, sexid);
        }
        
        public string[] ApikeyGetReciveMessagein7array(string cApikey, bool lReceiveAllmsg, string cFromnumber, string cFromDate, string cToDate) {
            return base.Channel.ApikeyGetReciveMessagein7array(cApikey, lReceiveAllmsg, cFromnumber, cFromDate, cToDate);
        }
        
        public System.Threading.Tasks.Task<string[]> ApikeyGetReciveMessagein7arrayAsync(string cApikey, bool lReceiveAllmsg, string cFromnumber, string cFromDate, string cToDate) {
            return base.Channel.ApikeyGetReciveMessagein7arrayAsync(cApikey, lReceiveAllmsg, cFromnumber, cFromDate, cToDate);
        }
        
        public string[] ApikeyGetNumber(string cApikey) {
            return base.Channel.ApikeyGetNumber(cApikey);
        }
        
        public System.Threading.Tasks.Task<string[]> ApikeyGetNumberAsync(string cApikey) {
            return base.Channel.ApikeyGetNumberAsync(cApikey);
        }
        
        public string Apikeychargeuser(string cApikey, string cUsercharge, long nCharge, string cDesCharge) {
            return base.Channel.Apikeychargeuser(cApikey, cUsercharge, nCharge, cDesCharge);
        }
        
        public System.Threading.Tasks.Task<string> ApikeychargeuserAsync(string cApikey, string cUsercharge, long nCharge, string cDesCharge) {
            return base.Channel.ApikeychargeuserAsync(cApikey, cUsercharge, nCharge, cDesCharge);
        }
        
        public string ApikeyActivateCentral(string cApikey, string cSerial, bool lActivationType) {
            return base.Channel.ApikeyActivateCentral(cApikey, cSerial, lActivationType);
        }
        
        public System.Threading.Tasks.Task<string> ApikeyActivateCentralAsync(string cApikey, string cSerial, bool lActivationType) {
            return base.Channel.ApikeyActivateCentralAsync(cApikey, cSerial, lActivationType);
        }
        
        public string[] ApikeySantralConfig(string cApikey, string cCommand, int typeodata, string[] cValues, string[] cDatas) {
            return base.Channel.ApikeySantralConfig(cApikey, cCommand, typeodata, cValues, cDatas);
        }
        
        public System.Threading.Tasks.Task<string[]> ApikeySantralConfigAsync(string cApikey, string cCommand, int typeodata, string[] cValues, string[] cDatas) {
            return base.Channel.ApikeySantralConfigAsync(cApikey, cCommand, typeodata, cValues, cDatas);
        }
        
        public string ApikeySendSms(string cApikey, string cBody, string cSmsnumber, string cGetid, int nCMessage, int nTypeSent, string m_SchedulDate, string cFromNumber, int nSpeedsms, int nPeriodmin, string cstarttime, string cEndTime) {
            return base.Channel.ApikeySendSms(cApikey, cBody, cSmsnumber, cGetid, nCMessage, nTypeSent, m_SchedulDate, cFromNumber, nSpeedsms, nPeriodmin, cstarttime, cEndTime);
        }
        
        public System.Threading.Tasks.Task<string> ApikeySendSmsAsync(string cApikey, string cBody, string cSmsnumber, string cGetid, int nCMessage, int nTypeSent, string m_SchedulDate, string cFromNumber, int nSpeedsms, int nPeriodmin, string cstarttime, string cEndTime) {
            return base.Channel.ApikeySendSmsAsync(cApikey, cBody, cSmsnumber, cGetid, nCMessage, nTypeSent, m_SchedulDate, cFromNumber, nSpeedsms, nPeriodmin, cstarttime, cEndTime);
        }
        
        public long[] ApikeySendSms1To1(string cApikey, string[] aBody, string[] aMobileno, long[] aGetid, int[] aCMessage, string[] aFromNumber, int[] atypeUnicodemessage, string[] am_SchedulDate, int nTypeSent, int nSpeedsms, int nPeriodmin) {
            return base.Channel.ApikeySendSms1To1(cApikey, aBody, aMobileno, aGetid, aCMessage, aFromNumber, atypeUnicodemessage, am_SchedulDate, nTypeSent, nSpeedsms, nPeriodmin);
        }
        
        public System.Threading.Tasks.Task<long[]> ApikeySendSms1To1Async(string cApikey, string[] aBody, string[] aMobileno, long[] aGetid, int[] aCMessage, string[] aFromNumber, int[] atypeUnicodemessage, string[] am_SchedulDate, int nTypeSent, int nSpeedsms, int nPeriodmin) {
            return base.Channel.ApikeySendSms1To1Async(cApikey, aBody, aMobileno, aGetid, aCMessage, aFromNumber, atypeUnicodemessage, am_SchedulDate, nTypeSent, nSpeedsms, nPeriodmin);
        }
        
        public string[] ApikeyGetDelivery(string cApikey, string[] aSid) {
            return base.Channel.ApikeyGetDelivery(cApikey, aSid);
        }
        
        public System.Threading.Tasks.Task<string[]> ApikeyGetDeliveryAsync(string cApikey, string[] aSid) {
            return base.Channel.ApikeyGetDeliveryAsync(cApikey, aSid);
        }
        
        public string[] ApikeyGetuserInfo(string cApikey) {
            return base.Channel.ApikeyGetuserInfo(cApikey);
        }
        
        public System.Threading.Tasks.Task<string[]> ApikeyGetuserInfoAsync(string cApikey) {
            return base.Channel.ApikeyGetuserInfoAsync(cApikey);
        }
        
        public string[] ApikeyGetDeliveryWithGetid(string cApikey, string cGetid, bool lReturnSid) {
            return base.Channel.ApikeyGetDeliveryWithGetid(cApikey, cGetid, lReturnSid);
        }
        
        public System.Threading.Tasks.Task<string[]> ApikeyGetDeliveryWithGetidAsync(string cApikey, string cGetid, bool lReturnSid) {
            return base.Channel.ApikeyGetDeliveryWithGetidAsync(cApikey, cGetid, lReturnSid);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        AirpocketTRN.FatehService.ApikeyReceivesmsLowLevelResponse AirpocketTRN.FatehService.ServiceSoap.ApikeyReceivesmsLowLevel(AirpocketTRN.FatehService.ApikeyReceivesmsLowLevelRequest request) {
            return base.Channel.ApikeyReceivesmsLowLevel(request);
        }
        
        public void ApikeyReceivesmsLowLevel(string cApikey, bool lReceiveAllmsg, string cFromnumber, ref string[] aBody, ref string[] aMobileno, ref long[] aMessageid, ref string[] aReceivedate, ref string[] afromnumber) {
            AirpocketTRN.FatehService.ApikeyReceivesmsLowLevelRequest inValue = new AirpocketTRN.FatehService.ApikeyReceivesmsLowLevelRequest();
            inValue.cApikey = cApikey;
            inValue.lReceiveAllmsg = lReceiveAllmsg;
            inValue.cFromnumber = cFromnumber;
            inValue.aBody = aBody;
            inValue.aMobileno = aMobileno;
            inValue.aMessageid = aMessageid;
            inValue.aReceivedate = aReceivedate;
            inValue.afromnumber = afromnumber;
            AirpocketTRN.FatehService.ApikeyReceivesmsLowLevelResponse retVal = ((AirpocketTRN.FatehService.ServiceSoap)(this)).ApikeyReceivesmsLowLevel(inValue);
            aBody = retVal.aBody;
            aMobileno = retVal.aMobileno;
            aMessageid = retVal.aMessageid;
            aReceivedate = retVal.aReceivedate;
            afromnumber = retVal.afromnumber;
        }
        
        public System.Threading.Tasks.Task<AirpocketTRN.FatehService.ApikeyReceivesmsLowLevelResponse> ApikeyReceivesmsLowLevelAsync(AirpocketTRN.FatehService.ApikeyReceivesmsLowLevelRequest request) {
            return base.Channel.ApikeyReceivesmsLowLevelAsync(request);
        }
        
        public System.Data.DataTable ApikeyReceiveSms(string cApikey, bool lReceiveAllmsg, string cFromnumber, string cFromDate, string cToDate) {
            return base.Channel.ApikeyReceiveSms(cApikey, lReceiveAllmsg, cFromnumber, cFromDate, cToDate);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> ApikeyReceiveSmsAsync(string cApikey, bool lReceiveAllmsg, string cFromnumber, string cFromDate, string cToDate) {
            return base.Channel.ApikeyReceiveSmsAsync(cApikey, lReceiveAllmsg, cFromnumber, cFromDate, cToDate);
        }
        
        public string[] ApikeyDeleteReceivedMessages(string cApikey, long[] nMessageIds) {
            return base.Channel.ApikeyDeleteReceivedMessages(cApikey, nMessageIds);
        }
        
        public System.Threading.Tasks.Task<string[]> ApikeyDeleteReceivedMessagesAsync(string cApikey, long[] nMessageIds) {
            return base.Channel.ApikeyDeleteReceivedMessagesAsync(cApikey, nMessageIds);
        }
        
        public string ApikeyChangeReceiveNo(string cApikey, bool lReceiveAllmsg, string cFromNumber) {
            return base.Channel.ApikeyChangeReceiveNo(cApikey, lReceiveAllmsg, cFromNumber);
        }
        
        public System.Threading.Tasks.Task<string> ApikeyChangeReceiveNoAsync(string cApikey, bool lReceiveAllmsg, string cFromNumber) {
            return base.Channel.ApikeyChangeReceiveNoAsync(cApikey, lReceiveAllmsg, cFromNumber);
        }
        
        public int[] ApikeyGetMessageDelivery1to1(string cApikey, long[] longid) {
            return base.Channel.ApikeyGetMessageDelivery1to1(cApikey, longid);
        }
        
        public System.Threading.Tasks.Task<int[]> ApikeyGetMessageDelivery1to1Async(string cApikey, long[] longid) {
            return base.Channel.ApikeyGetMessageDelivery1to1Async(cApikey, longid);
        }
        
        public long[] ApikeyGetMessageDelivery1to1V2(string cApikey, long[] longid) {
            return base.Channel.ApikeyGetMessageDelivery1to1V2(cApikey, longid);
        }
        
        public System.Threading.Tasks.Task<long[]> ApikeyGetMessageDelivery1to1V2Async(string cApikey, long[] longid) {
            return base.Channel.ApikeyGetMessageDelivery1to1V2Async(cApikey, longid);
        }
        
        public long[] ApikeygetMessageIds1to1(string cApikey, long[] nCustomerid) {
            return base.Channel.ApikeygetMessageIds1to1(cApikey, nCustomerid);
        }
        
        public System.Threading.Tasks.Task<long[]> ApikeygetMessageIds1to1Async(string cApikey, long[] nCustomerid) {
            return base.Channel.ApikeygetMessageIds1to1Async(cApikey, nCustomerid);
        }
        
        public string GenerateApiKey(string cDomainName, string cUsername, string cPassword, int nlentgh) {
            return base.Channel.GenerateApiKey(cDomainName, cUsername, cPassword, nlentgh);
        }
        
        public System.Threading.Tasks.Task<string> GenerateApiKeyAsync(string cDomainName, string cUsername, string cPassword, int nlentgh) {
            return base.Channel.GenerateApiKeyAsync(cDomainName, cUsername, cPassword, nlentgh);
        }
        
        public string Sendsmsphonebook(string cUserName, string cPassword, string cBody, string cGetid, int nTypeSent, string m_SchedulDate, string cDomainname, string cFromNumber, int nSpeedsms, int nPeriodmin, string cstarttime, string cEndTime, int groupphonebook, bool isgroupid) {
            return base.Channel.Sendsmsphonebook(cUserName, cPassword, cBody, cGetid, nTypeSent, m_SchedulDate, cDomainname, cFromNumber, nSpeedsms, nPeriodmin, cstarttime, cEndTime, groupphonebook, isgroupid);
        }
        
        public System.Threading.Tasks.Task<string> SendsmsphonebookAsync(string cUserName, string cPassword, string cBody, string cGetid, int nTypeSent, string m_SchedulDate, string cDomainname, string cFromNumber, int nSpeedsms, int nPeriodmin, string cstarttime, string cEndTime, int groupphonebook, bool isgroupid) {
            return base.Channel.SendsmsphonebookAsync(cUserName, cPassword, cBody, cGetid, nTypeSent, m_SchedulDate, cDomainname, cFromNumber, nSpeedsms, nPeriodmin, cstarttime, cEndTime, groupphonebook, isgroupid);
        }
        
        public string SENDVERIFICATIONCODE(string cDomainName, string cUsername, string cPassword, string cMobileno, int nVerificationid, int nCodeVerification) {
            return base.Channel.SENDVERIFICATIONCODE(cDomainName, cUsername, cPassword, cMobileno, nVerificationid, nCodeVerification);
        }
        
        public System.Threading.Tasks.Task<string> SENDVERIFICATIONCODEAsync(string cDomainName, string cUsername, string cPassword, string cMobileno, int nVerificationid, int nCodeVerification) {
            return base.Channel.SENDVERIFICATIONCODEAsync(cDomainName, cUsername, cPassword, cMobileno, nVerificationid, nCodeVerification);
        }
        
        public string addinphonebook(string cDomainName, string cUsername, string cPassword, string phonebookcode, string cMobileno, string Companyname, string Fullname, string sexid) {
            return base.Channel.addinphonebook(cDomainName, cUsername, cPassword, phonebookcode, cMobileno, Companyname, Fullname, sexid);
        }
        
        public System.Threading.Tasks.Task<string> addinphonebookAsync(string cDomainName, string cUsername, string cPassword, string phonebookcode, string cMobileno, string Companyname, string Fullname, string sexid) {
            return base.Channel.addinphonebookAsync(cDomainName, cUsername, cPassword, phonebookcode, cMobileno, Companyname, Fullname, sexid);
        }
        
        public string[] GetReciveMessagein7array(string cUserName, string cPassword, bool lReceiveAllmsg, string cDomainName, string cFromnumber, string cFromDate, string cToDate) {
            return base.Channel.GetReciveMessagein7array(cUserName, cPassword, lReceiveAllmsg, cDomainName, cFromnumber, cFromDate, cToDate);
        }
        
        public System.Threading.Tasks.Task<string[]> GetReciveMessagein7arrayAsync(string cUserName, string cPassword, bool lReceiveAllmsg, string cDomainName, string cFromnumber, string cFromDate, string cToDate) {
            return base.Channel.GetReciveMessagein7arrayAsync(cUserName, cPassword, lReceiveAllmsg, cDomainName, cFromnumber, cFromDate, cToDate);
        }
        
        public string[] GetNumber(string cDomainname, string cUsername, string cpassword) {
            return base.Channel.GetNumber(cDomainname, cUsername, cpassword);
        }
        
        public System.Threading.Tasks.Task<string[]> GetNumberAsync(string cDomainname, string cUsername, string cpassword) {
            return base.Channel.GetNumberAsync(cDomainname, cUsername, cpassword);
        }
        
        public string ForgetPassword(string cDomainname, string cUsername, string cMobileno) {
            return base.Channel.ForgetPassword(cDomainname, cUsername, cMobileno);
        }
        
        public System.Threading.Tasks.Task<string> ForgetPasswordAsync(string cDomainname, string cUsername, string cMobileno) {
            return base.Channel.ForgetPasswordAsync(cDomainname, cUsername, cMobileno);
        }
        
        public string chargeuser(string cDomainname, string cUsername, string cpassword, string cUsercharge, long nCharge, string cDesCharge) {
            return base.Channel.chargeuser(cDomainname, cUsername, cpassword, cUsercharge, nCharge, cDesCharge);
        }
        
        public System.Threading.Tasks.Task<string> chargeuserAsync(string cDomainname, string cUsername, string cpassword, string cUsercharge, long nCharge, string cDesCharge) {
            return base.Channel.chargeuserAsync(cDomainname, cUsername, cpassword, cUsercharge, nCharge, cDesCharge);
        }
        
        public string ActivateCentral(string cUSername, string cPassword, string cDomainname, string cSerial, bool lActivationType) {
            return base.Channel.ActivateCentral(cUSername, cPassword, cDomainname, cSerial, lActivationType);
        }
        
        public System.Threading.Tasks.Task<string> ActivateCentralAsync(string cUSername, string cPassword, string cDomainname, string cSerial, bool lActivationType) {
            return base.Channel.ActivateCentralAsync(cUSername, cPassword, cDomainname, cSerial, lActivationType);
        }
        
        public string SantralData(string cUSername, string cPassword, string cDomainname, string cData) {
            return base.Channel.SantralData(cUSername, cPassword, cDomainname, cData);
        }
        
        public System.Threading.Tasks.Task<string> SantralDataAsync(string cUSername, string cPassword, string cDomainname, string cData) {
            return base.Channel.SantralDataAsync(cUSername, cPassword, cDomainname, cData);
        }
        
        public string[] SantralConfig(string cUSername, string cPassword, string cDomainname, string cCommand, int typeodata, string[] cValues, string[] cDatas) {
            return base.Channel.SantralConfig(cUSername, cPassword, cDomainname, cCommand, typeodata, cValues, cDatas);
        }
        
        public System.Threading.Tasks.Task<string[]> SantralConfigAsync(string cUSername, string cPassword, string cDomainname, string cCommand, int typeodata, string[] cValues, string[] cDatas) {
            return base.Channel.SantralConfigAsync(cUSername, cPassword, cDomainname, cCommand, typeodata, cValues, cDatas);
        }
        
        public string SendSmsShort(string cUserName, string cPassword, string cBody, string cSmsnumber, string cDomainname) {
            return base.Channel.SendSmsShort(cUserName, cPassword, cBody, cSmsnumber, cDomainname);
        }
        
        public System.Threading.Tasks.Task<string> SendSmsShortAsync(string cUserName, string cPassword, string cBody, string cSmsnumber, string cDomainname) {
            return base.Channel.SendSmsShortAsync(cUserName, cPassword, cBody, cSmsnumber, cDomainname);
        }
        
        public string SendSms(string cUserName, string cPassword, string cBody, string cSmsnumber, string cGetid, int nCMessage, int nTypeSent, string m_SchedulDate, string cDomainname, string cFromNumber, int nSpeedsms, int nPeriodmin, string cstarttime, string cEndTime) {
            return base.Channel.SendSms(cUserName, cPassword, cBody, cSmsnumber, cGetid, nCMessage, nTypeSent, m_SchedulDate, cDomainname, cFromNumber, nSpeedsms, nPeriodmin, cstarttime, cEndTime);
        }
        
        public System.Threading.Tasks.Task<string> SendSmsAsync(string cUserName, string cPassword, string cBody, string cSmsnumber, string cGetid, int nCMessage, int nTypeSent, string m_SchedulDate, string cDomainname, string cFromNumber, int nSpeedsms, int nPeriodmin, string cstarttime, string cEndTime) {
            return base.Channel.SendSmsAsync(cUserName, cPassword, cBody, cSmsnumber, cGetid, nCMessage, nTypeSent, m_SchedulDate, cDomainname, cFromNumber, nSpeedsms, nPeriodmin, cstarttime, cEndTime);
        }
        
        public long[] SendSms1To1(string cDomainname, string cUserName, string cPassword, string[] aBody, string[] aMobileno, long[] aGetid, int[] aCMessage, string[] aFromNumber, int[] atypeUnicodemessage, string[] am_SchedulDate, int nTypeSent, int nSpeedsms, int nPeriodmin) {
            return base.Channel.SendSms1To1(cDomainname, cUserName, cPassword, aBody, aMobileno, aGetid, aCMessage, aFromNumber, atypeUnicodemessage, am_SchedulDate, nTypeSent, nSpeedsms, nPeriodmin);
        }
        
        public System.Threading.Tasks.Task<long[]> SendSms1To1Async(string cDomainname, string cUserName, string cPassword, string[] aBody, string[] aMobileno, long[] aGetid, int[] aCMessage, string[] aFromNumber, int[] atypeUnicodemessage, string[] am_SchedulDate, int nTypeSent, int nSpeedsms, int nPeriodmin) {
            return base.Channel.SendSms1To1Async(cDomainname, cUserName, cPassword, aBody, aMobileno, aGetid, aCMessage, aFromNumber, atypeUnicodemessage, am_SchedulDate, nTypeSent, nSpeedsms, nPeriodmin);
        }
        
        public string[] GetDelivery(string cUserName, string cPassword, string[] aSid) {
            return base.Channel.GetDelivery(cUserName, cPassword, aSid);
        }
        
        public System.Threading.Tasks.Task<string[]> GetDeliveryAsync(string cUserName, string cPassword, string[] aSid) {
            return base.Channel.GetDeliveryAsync(cUserName, cPassword, aSid);
        }
        
        public string ChangePassword(string cUserName, string cPassword, string cNewPassword, string cDomainName) {
            return base.Channel.ChangePassword(cUserName, cPassword, cNewPassword, cDomainName);
        }
        
        public System.Threading.Tasks.Task<string> ChangePasswordAsync(string cUserName, string cPassword, string cNewPassword, string cDomainName) {
            return base.Channel.ChangePasswordAsync(cUserName, cPassword, cNewPassword, cDomainName);
        }
        
        public string[] GetuserInfo(string cUserName, string cPassword, string cDomainName) {
            return base.Channel.GetuserInfo(cUserName, cPassword, cDomainName);
        }
        
        public System.Threading.Tasks.Task<string[]> GetuserInfoAsync(string cUserName, string cPassword, string cDomainName) {
            return base.Channel.GetuserInfoAsync(cUserName, cPassword, cDomainName);
        }
        
        public string[] GetDeliveryWithGetid(string cUserName, string cPassword, string cGetid, bool lReturnSid, string cDomainname) {
            return base.Channel.GetDeliveryWithGetid(cUserName, cPassword, cGetid, lReturnSid, cDomainname);
        }
        
        public System.Threading.Tasks.Task<string[]> GetDeliveryWithGetidAsync(string cUserName, string cPassword, string cGetid, bool lReturnSid, string cDomainname) {
            return base.Channel.GetDeliveryWithGetidAsync(cUserName, cPassword, cGetid, lReturnSid, cDomainname);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        AirpocketTRN.FatehService.ReceivesmsLowLevelResponse AirpocketTRN.FatehService.ServiceSoap.ReceivesmsLowLevel(AirpocketTRN.FatehService.ReceivesmsLowLevelRequest request) {
            return base.Channel.ReceivesmsLowLevel(request);
        }
        
        public void ReceivesmsLowLevel(string cUserName, string cPassword, bool lReceiveAllmsg, string cDomainName, string cFromnumber, ref string[] aBody, ref string[] aMobileno, ref long[] aMessageid, ref string[] aReceivedate, ref string[] afromnumber) {
            AirpocketTRN.FatehService.ReceivesmsLowLevelRequest inValue = new AirpocketTRN.FatehService.ReceivesmsLowLevelRequest();
            inValue.cUserName = cUserName;
            inValue.cPassword = cPassword;
            inValue.lReceiveAllmsg = lReceiveAllmsg;
            inValue.cDomainName = cDomainName;
            inValue.cFromnumber = cFromnumber;
            inValue.aBody = aBody;
            inValue.aMobileno = aMobileno;
            inValue.aMessageid = aMessageid;
            inValue.aReceivedate = aReceivedate;
            inValue.afromnumber = afromnumber;
            AirpocketTRN.FatehService.ReceivesmsLowLevelResponse retVal = ((AirpocketTRN.FatehService.ServiceSoap)(this)).ReceivesmsLowLevel(inValue);
            aBody = retVal.aBody;
            aMobileno = retVal.aMobileno;
            aMessageid = retVal.aMessageid;
            aReceivedate = retVal.aReceivedate;
            afromnumber = retVal.afromnumber;
        }
        
        public System.Threading.Tasks.Task<AirpocketTRN.FatehService.ReceivesmsLowLevelResponse> ReceivesmsLowLevelAsync(AirpocketTRN.FatehService.ReceivesmsLowLevelRequest request) {
            return base.Channel.ReceivesmsLowLevelAsync(request);
        }
        
        public System.Data.DataTable ReceiveSms(string cUserName, string cPassword, bool lReceiveAllmsg, string cDomainName, string cFromnumber, string cFromDate, string cToDate) {
            return base.Channel.ReceiveSms(cUserName, cPassword, lReceiveAllmsg, cDomainName, cFromnumber, cFromDate, cToDate);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> ReceiveSmsAsync(string cUserName, string cPassword, bool lReceiveAllmsg, string cDomainName, string cFromnumber, string cFromDate, string cToDate) {
            return base.Channel.ReceiveSmsAsync(cUserName, cPassword, lReceiveAllmsg, cDomainName, cFromnumber, cFromDate, cToDate);
        }
        
        public string[] DeleteReceivedMessages(string cUserName, string cPassword, string cDomainName, long[] nMessageIds) {
            return base.Channel.DeleteReceivedMessages(cUserName, cPassword, cDomainName, nMessageIds);
        }
        
        public System.Threading.Tasks.Task<string[]> DeleteReceivedMessagesAsync(string cUserName, string cPassword, string cDomainName, long[] nMessageIds) {
            return base.Channel.DeleteReceivedMessagesAsync(cUserName, cPassword, cDomainName, nMessageIds);
        }
        
        public string ChangeReceiveNo(string cUserName, string cPassword, bool lReceiveAllmsg, string cDomainName, string cFromNumber) {
            return base.Channel.ChangeReceiveNo(cUserName, cPassword, lReceiveAllmsg, cDomainName, cFromNumber);
        }
        
        public System.Threading.Tasks.Task<string> ChangeReceiveNoAsync(string cUserName, string cPassword, bool lReceiveAllmsg, string cDomainName, string cFromNumber) {
            return base.Channel.ChangeReceiveNoAsync(cUserName, cPassword, lReceiveAllmsg, cDomainName, cFromNumber);
        }
        
        public int[] GetMessageDelivery1to1(string cUserName, string cPassword, string cDomainname, long[] longid) {
            return base.Channel.GetMessageDelivery1to1(cUserName, cPassword, cDomainname, longid);
        }
        
        public System.Threading.Tasks.Task<int[]> GetMessageDelivery1to1Async(string cUserName, string cPassword, string cDomainname, long[] longid) {
            return base.Channel.GetMessageDelivery1to1Async(cUserName, cPassword, cDomainname, longid);
        }
        
        public long[] GetMessageDelivery1to1V2(string cUserName, string cPassword, string cDomainname, long[] longid) {
            return base.Channel.GetMessageDelivery1to1V2(cUserName, cPassword, cDomainname, longid);
        }
        
        public System.Threading.Tasks.Task<long[]> GetMessageDelivery1to1V2Async(string cUserName, string cPassword, string cDomainname, long[] longid) {
            return base.Channel.GetMessageDelivery1to1V2Async(cUserName, cPassword, cDomainname, longid);
        }
        
        public long[] getMessageIds1to1(string cUserName, string cPassword, string cDomainname, long[] nCustomerid) {
            return base.Channel.getMessageIds1to1(cUserName, cPassword, cDomainname, nCustomerid);
        }
        
        public System.Threading.Tasks.Task<long[]> getMessageIds1to1Async(string cUserName, string cPassword, string cDomainname, long[] nCustomerid) {
            return base.Channel.getMessageIds1to1Async(cUserName, cPassword, cDomainname, nCustomerid);
        }
        
        public string ShowError(string cErrorCode, string cLanShow) {
            return base.Channel.ShowError(cErrorCode, cLanShow);
        }
        
        public System.Threading.Tasks.Task<string> ShowErrorAsync(string cErrorCode, string cLanShow) {
            return base.Channel.ShowErrorAsync(cErrorCode, cLanShow);
        }
        
        public int GetMessageLength(string cBody) {
            return base.Channel.GetMessageLength(cBody);
        }
        
        public System.Threading.Tasks.Task<int> GetMessageLengthAsync(string cBody) {
            return base.Channel.GetMessageLengthAsync(cBody);
        }
        
        public int GetUnicodeMessage(string cBody) {
            return base.Channel.GetUnicodeMessage(cBody);
        }
        
        public System.Threading.Tasks.Task<int> GetUnicodeMessageAsync(string cBody) {
            return base.Channel.GetUnicodeMessageAsync(cBody);
        }
        
        public long[] mehrafrazDelivery(string cCommand, string cFormatSms, long[] asid, int[] nsmsstatus, string[] adate) {
            return base.Channel.mehrafrazDelivery(cCommand, cFormatSms, asid, nsmsstatus, adate);
        }
        
        public System.Threading.Tasks.Task<long[]> mehrafrazDeliveryAsync(string cCommand, string cFormatSms, long[] asid, int[] nsmsstatus, string[] adate) {
            return base.Channel.mehrafrazDeliveryAsync(cCommand, cFormatSms, asid, nsmsstatus, adate);
        }
        
        public string CheckDeliverFromServer(int nAccountUsesid, int ntypeSms) {
            return base.Channel.CheckDeliverFromServer(nAccountUsesid, ntypeSms);
        }
        
        public System.Threading.Tasks.Task<string> CheckDeliverFromServerAsync(int nAccountUsesid, int ntypeSms) {
            return base.Channel.CheckDeliverFromServerAsync(nAccountUsesid, ntypeSms);
        }
    }
}
